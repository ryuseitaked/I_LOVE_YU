<section class="hero is-success">
  <div class="hero-body">
    <div class="container">
      <h1 class="title">
        ♨周辺施設を探す♨
      </h1>
    </div>
  </div>
</section>


  <div class="col-lg-12">
    <div class="card map-card">
      <div class="card-img-bottom">
        <div id="map"></div>
      </div>
    </div>
  </div>



<div id="map"></div>


<script>
let map;
let marker = []; // マーカーを複数表示させたいので、配列化
let infoWindow = []; // 吹き出しを複数表示させたいので、配列化
const articles = gon.articles; // コントローラーで定義したインスタンス変数を変数に代入

function initMap(){
  // 現在位置の特定
  navigator.geolocation.getCurrentPosition(function (position){
    // LatLngに位置座標を代入
    LatLng = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);

    // mapの初期位置設定
    map = new google.maps.Map(document.getElementById('map'), {
      center: LatLng,
      zoom: 13
    });
    // map.setCenterで地図が初期位置に移動
    map.setCenter(LatLng);

    // forは繰り返し処理
    // 変数iを0と定義し、
    // その後gonで定義したarticles分繰り返し加える処理を行う
    for (let i = 0; i < articles.length; i++){
      // articles[i]は変数iのユーザーを取得している
      marker[i] = new google.maps.Marker({
        map: map,
        position: {
          // DBに保存してある、緯度・経度を呼び出す
          lat: articles[i].latitude,
          lng: articles[i].longitude
        }
      });

      // 変数iを変数idに代入
      let id = articles[i]['id']

      // infoWindowは吹き出し
      infoWindow[i] = new google.maps.InfoWindow({
        // contentで中身を指定
        // 文字にリンクを貼り付けた形で表示
        content: `<a href='/articles/${id}'>${articles[i].title}</a>`
      });
      // markerがクリックされた時、
      marker[i].addListener("click", function(){
        // infoWindowを表示
        infoWindow[i].open(map, marker[i]);
      });
    }
  });
}
</script>

<script async defer
      src="https://maps.googleapis.com/maps/api/js?v=3.exp&key=<%= ENV['GOOGLE_MAP_API'] %>&callback=initMap">
</script>